1) Make it so that it reads the oldest database volume, checks if we have spare room in it and
incrementally add to that volume.
--> Choose to either increase the size of a database partition (ex. all database parititions were are
2GB, now we want them to be 4GB) or to just force the database to follow in suit of the original
parition size.
* I choose to follow the original partition size


2) Make an option for controlling the memory

3) Make it threaded

4) Update the wiki with the documentation for lastdb.

void generateDifference(const std::string &filename){

}

Make sure the prjs are correct for all scenarios of incremental formatting

lastdb threading

// everybody needs a copy of the index structure
// everybody needs a copy of the multi

// threads read in a certain amount with an IO lock.


Merging the volumes as they are constructed
Making sure that the database creation works in parallel (appendFromFasta, writing reading etc)
Need to incorpoerate the sorter object into the thread class, its wastefeul as it is
